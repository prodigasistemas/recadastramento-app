package ui;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.LineNumberReader;import util.Constantes;import util.GZIP;import util.LogUtil;import util.Util;public class FileManager {	private static FileManager instancia;	private static FileInputStream fileInput;	private static InputStreamReader streamReader;	public static FileManager getInstancia() {		if (instancia == null) {			instancia = new FileManager();		}		return instancia;	}	public static int getQtdLinhas(String nomeArquivo) {		int qtd = 0;		try {			File arquivo = new File(Util.getExternalStorageDirectory() + Constantes.DIRETORIO_ROTAS, nomeArquivo);			LineNumberReader linha = new LineNumberReader(new FileReader(arquivo));			linha.skip(arquivo.length());			qtd = linha.getLineNumber();			linha.close();		} catch (FileNotFoundException e) {			LogUtil.salvar(FileManager.class, "Arquivo de rota n√£o encontrado", e);		} catch (IOException e) {			LogUtil.salvar(FileManager.class, "Erro ao obter quantidade de linhas do arquivo de rota", e);		}		return qtd;	}	public static BufferedReader readFile(String nomeArquivo) {		BufferedReader bufferedReader = null;		File arquivo = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + nomeArquivo);		if (arquivo.canRead()) {			try {				fileInput = new FileInputStream(arquivo);				streamReader = new InputStreamReader(new FileInputStream(arquivo), "ISO-8859-1");				bufferedReader = new BufferedReader(streamReader);			} catch (IOException e) {				e.printStackTrace();			}		}		return bufferedReader;	}	public static BufferedReader readCompressedFile(String fileName) {		BufferedReader bufferedReader = null;		File arquivo = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (arquivo.canRead()) {			try {				fileInput = new FileInputStream(arquivo);				byte[] arquivoCompactado = new byte[(int) arquivo.length()];				ByteArrayOutputStream outputStream = new ByteArrayOutputStream();				int nrb = fileInput.read(arquivoCompactado, 0, (int) arquivo.length());				while (nrb != -1) {					outputStream.write(arquivoCompactado, 0, nrb);					nrb = fileInput.read(arquivoCompactado, 0, (int) arquivo.length());				}								arquivoCompactado = outputStream.toByteArray();				arquivoCompactado = GZIP.inflate(arquivoCompactado);				ByteArrayInputStream inputStream = new ByteArrayInputStream(arquivoCompactado);				streamReader = new InputStreamReader(inputStream, "ISO-8859-1");				bufferedReader = new BufferedReader(streamReader);			} catch (IOException e) {				e.printStackTrace();			}		}		return bufferedReader;	}	public static boolean verificarExistenciaArquivo(String nomeArquivo) {		boolean result = false;		return result;	}}